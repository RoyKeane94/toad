"""
Django settings for toad project.

Generated by 'django-admin startproject' using Django 5.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# ---
# CORE PATH AND ENVIRONMENT CONFIGURATION
# ---

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Use python-dotenv to load a .env file for local development.
# On a hosting platform like Railway, these variables should be set in the environment directly.
load_dotenv(os.path.join(BASE_DIR, '.env'))

# ---
# SINGLE SOURCE OF TRUTH FOR ENVIRONMENT
# ---
# IS_PRODUCTION is True only if DJANGO_DEBUG_ENVIRONMENT is set to '1'.
# All other settings will be derived from this one variable.
IS_PRODUCTION = os.environ.get('DJANGO_DEBUG_ENVIRONMENT') == '1'

# TEMPORARY: Override for S3 testing in development
# Set this to True to test S3 locally, then set back to False
FORCE_S3_TESTING = os.environ.get('FORCE_S3_TESTING') == 'true'

# The DEBUG flag is the opposite of IS_PRODUCTION.
DEBUG = not IS_PRODUCTION

# Log the determined environment for easy debugging during startup.
if IS_PRODUCTION:
    print("--- Running in PRODUCTION mode ---")
else:
    print("--- Running in DEVELOPMENT mode ---")


# ---
# CORE DJANGO SETTINGS
# ---

# SECURITY WARNING: keep the secret key used in production secret!
# It's recommended to set this from the environment in production.
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'a-strong-insecure-fallback-key-for-development-only')

if IS_PRODUCTION:
    ALLOWED_HOSTS = [
        'toad-production.up.railway.app',  # Replace with your actual Railway domain
        '.up.railway.app',
        'meettoad.co.uk',
        'www.meettoad.co.uk'
    ]
    CSRF_TRUSTED_ORIGINS = [
        'https://toad-production.up.railway.app', # Replace with your actual Railway domain
    ]
else:
    # In development, allow localhost and 127.0.0.1
    ALLOWED_HOSTS = ['localhost', '127.0.0.1', '0.0.0.0']
    CSRF_TRUSTED_ORIGINS = []


# ---
# APPLICATION DEFINITION
# ---

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Your Apps
    'accounts',
    'pages',
    'CRM',

    # Third-party apps
    'tailwind',
    'theme',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    # WhiteNoise Middleware should be placed directly after the SecurityMiddleware
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.gzip.GZipMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'accounts.middleware.EmailVerificationMiddleware',
]

ROOT_URLCONF = 'toad.urls'
WSGI_APPLICATION = 'toad.wsgi.application'
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
AUTH_USER_MODEL = 'accounts.User'
TAILWIND_APP_NAME = 'theme'


# ---
# TEMPLATES
# ---

TEMPLATE_OPTIONS = {
    'context_processors': [
        'django.template.context_processors.debug',
        'django.template.context_processors.request',
        'django.contrib.auth.context_processors.auth',
        'django.contrib.messages.context_processors.messages',
    ],
}

# Now, define the main TEMPLATES list
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'OPTIONS': TEMPLATE_OPTIONS,
    },
]

# --- Conditionally configure the template loaders based on the environment ---

if IS_PRODUCTION:
    # In PRODUCTION, we turn off APP_DIRS and specify a cached loader for performance.
    # The 'django.template.loaders.app_directories.Loader' inside the cached loader
    # explicitly provides the functionality of APP_DIRS=True.
    TEMPLATES[0]['APP_DIRS'] = False
    TEMPLATES[0]['OPTIONS']['loaders'] = [
        ('django.template.loaders.cached.Loader', [
            'django.template.loaders.filesystem.Loader',
            'django.template.loaders.app_directories.Loader',
        ]),
    ]
else:
    # In DEVELOPMENT, we just use the simple and standard APP_DIRS = True.
    TEMPLATES[0]['APP_DIRS'] = True


# ---
# DATABASE
# ---

if IS_PRODUCTION:
    # Production database configuration (e.g., Railway PostgreSQL)
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.environ.get('DJANGO_NAME'),
            'USER': os.environ.get('DJANGO_USER'),
            'PASSWORD': os.environ.get('DJANGO_PASSWORD'),
            'HOST': os.environ.get('DJANGO_HOST'),
            'PORT': os.environ.get('DJANGO_PORT'),
            'OPTIONS': {'sslmode': 'require'},
            'CONN_MAX_AGE': 60,  # Pool connections for performance
        }
    }
else:
    # Local development database (SQLite)
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# ---
# STATIC FILES (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/
# ---

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'  # Directory where collectstatic will gather files
STATICFILES_DIRS = [BASE_DIR / 'static'] # Directory where you place your own static files

# Use WhiteNoise's storage backend in production for compression and caching
if IS_PRODUCTION:
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
else:
    # The default storage is fine for development
    STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'

# ---
# MEDIA FILES (User Uploads)
# https://docs.djangoproject.com/en/5.0/topics/files/
# ---

# Media files configuration
if IS_PRODUCTION or FORCE_S3_TESTING:
    # Use S3 for media files in production
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    
    # S3 Configuration
    AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
    AWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_STORAGE_BUCKET_NAME')
    AWS_S3_REGION_NAME = os.environ.get('AWS_S3_REGION_NAME')
    
    # S3 Security and Performance
    AWS_S3_FILE_OVERWRITE = False  # Don't overwrite files with same name
    # Explicitly disable ACLs since bucket doesn't support them
    AWS_DEFAULT_ACL = None
    AWS_S3_OBJECT_PARAMETERS = {
        'CacheControl': 'max-age=86400',  # Cache for 24 hours
    }
    
    # Use the correct S3 endpoint format
    MEDIA_URL = f'https://{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}.amazonaws.com/'
else:
    # Use local storage for media files in development
    MEDIA_URL = '/media/'
    if IS_PRODUCTION:
        # Use Railway-compatible path for production
        MEDIA_ROOT = '/tmp/media'
    else:
        # Use local path for development
        MEDIA_ROOT = BASE_DIR / 'media'
    
    # Ensure local storage is used when S3 is disabled
    DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'


# ---
# PASSWORD VALIDATION
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators
# ---

AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]


# ---
# INTERNATIONALIZATION
# https://docs.djangoproject.com/en/5.0/topics/i18n/
# ---

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True


# ---
# PRODUCTION-ONLY SECURITY AND PERFORMANCE SETTINGS
# ---

if IS_PRODUCTION:
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_SSL_REDIRECT = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True


# ---
# EMAIL CONFIGURATION
# ---

# Email settings
if IS_PRODUCTION:
    # Production email settings - using Microsoft Office 365 SMTP
    EMAIL_BACKEND = 'accounts.email_backend.Office365EmailBackend'
    EMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.office365.com')
    EMAIL_PORT = int(os.environ.get('EMAIL_PORT', 587))
    EMAIL_USE_TLS = True
    EMAIL_USE_SSL = False
    EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
    EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')
    DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'noreply@meettoad.co.uk')
else:
    # Development email settings - use console backend for easier debugging
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
    # Fallback to Office365 if credentials are provided
    if os.environ.get('EMAIL_HOST_USER') and os.environ.get('EMAIL_HOST_PASSWORD'):
        EMAIL_BACKEND = 'accounts.email_backend.Office365EmailBackend'
        EMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.office365.com')
        EMAIL_PORT = int(os.environ.get('EMAIL_PORT', 587))
        EMAIL_USE_TLS = True
        EMAIL_USE_SSL = False
        EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
        EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')
        DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'accounts@meettoad.co.uk')

# Site URL for email links
SITE_URL = os.environ.get('SITE_URL', 'http://localhost:8000')

# Test email sender (optional - falls back to DEFAULT_FROM_EMAIL)
TEST_EMAIL_FROM = os.environ.get('TEST_EMAIL_FROM', DEFAULT_FROM_EMAIL)

# Tom's email configuration (for test emails from tom@meettoad.co.uk)
# Uses PERSONAL_EMAIL_HOST_USER for authentication
TOM_EMAIL_HOST = os.environ.get('PERSONAL_EMAIL_HOST', EMAIL_HOST)
TOM_EMAIL_PORT = int(os.environ.get('PERSONAL_EMAIL_PORT', EMAIL_PORT))
TOM_EMAIL_USER = os.environ.get('PERSONAL_EMAIL_HOST_USER', EMAIL_HOST_USER)
TOM_EMAIL_PASSWORD = os.environ.get('PERSONAL_EMAIL_HOST_PASSWORD', EMAIL_HOST_PASSWORD)

# ---
# LOGGING
# ---

if IS_PRODUCTION:
    # Production logging - both console and file for Railway debugging
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'verbose': {
                'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
                'style': '{',
            },
            'simple': {
                'format': '{levelname} {message}',
                'style': '{',
            },
        },
        'handlers': {
            'console': {
                'level': 'INFO',
                'class': 'logging.StreamHandler',
                'formatter': 'simple',
            },
            'file': {
                'level': 'INFO',
                'class': 'logging.handlers.RotatingFileHandler',
                'filename': BASE_DIR / 'logs' / 'toad.log',
                'maxBytes': 1024 * 1024 * 5,  # 5 MB
                'backupCount': 5,
                'formatter': 'verbose',
            },
        },
        'root': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
        },
        'loggers': {
            'django': {
                'handlers': ['console', 'file'],
                'level': 'INFO',
                'propagate': False,
            },
        },
    }
else:
    # Development logging - console and file for easier debugging
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'verbose': {
                'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
                'style': '{',
            },
            'simple': {
                'format': '{levelname} {message}',
                'style': '{',
            },
        },
        'handlers': {
            'console': {
                'level': 'DEBUG',
                'class': 'logging.StreamHandler',
                'formatter': 'simple',
            },
            'file': {
                'level': 'INFO',
                'class': 'logging.handlers.RotatingFileHandler',
                'filename': BASE_DIR / 'logs' / 'toad.log',
                'maxBytes': 1024 * 1024 * 5,  # 5 MB
                'backupCount': 5,
                'formatter': 'verbose',
            },
        },
        'root': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
        },
        'loggers': {
            'django': {
                'handlers': ['console', 'file'],
                'level': 'INFO',
                'propagate': False,
            },
        },
    }